- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ansible_python_interpreter: python
    common_args: &common
      api_key: foo
      api_spec_file: ../api-swagger.json
  tasks:
    - name: check for non-existent zone
      pdns_auth_zone:
        <<: *common
        name: d1.example.
        state: exists
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when: result.zone.exists != false

    - name: check notify for non-existent zone
      pdns_auth_zone:
        <<: *common
        name: d1.example.
        state: notify
      ignore_errors: true
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when: result.failed != true

    - name: check 'Native' zone creation
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: present
        properties:
          kind: 'Native'
          nameservers:
            - 'ns.example.'
        metadata:
          allow_axfr_from:
            - 'AUTO-NS'
          ixfr: true
          axfr_source: '127.0.0.1'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
        - result.zone.name != d2.example.
        - result.zone.kind != 'Native'
        - result.zone.nameservers[0] != 'ns.example.'
        - result.zone.metadata.allow_axfr_from[0] != 'AUTO-NS'
        - result.zone.metadata.ixfr != true
        - result.zone.metadata.axfr_source != '127.0.0.1'

    - name: check that zone properties and metadata did not change
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: present
        properties:
          kind: 'Native'
          nameservers:
            - 'ns.example.'
        metadata:
          allow_axfr_from:
            - 'AUTO-NS'
          ixfr: true
          axfr_source: '127.0.0.1'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != false
        - result.zone.name != d2.example.
        - result.zone.kind != 'Native'
        - result.zone.nameservers[0] != 'ns.example.'
        - result.zone.metadata.allow_axfr_from[0] != 'AUTO-NS'
        - result.zone.metadata.ixfr != true
        - result.zone.metadata.axfr_source != '127.0.0.1'

    - name: check zone kind change from 'Native' to 'Master'
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: present
        properties:
          kind: 'Master'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
        - result.zone.kind != 'Master'

    - name: check zone metadata change
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: present
        properties:
          kind: 'Master'
        metadata:
          allow_axfr_from:
            - 'AUTO-NS'
            - '::'
          ixfr: false
          axfr_source: '127.0.0.8'
          slave_renotify: true
          tsig_allow_axfr:
            - 'axfr-key'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
        - result.zone.metadata.allow_axfr_from[0] != 'AUTO-NS'
        - result.zone.metadata.allow_axfr_from[1] != '::'
        - result.zone.metadata.ixfr != false
        - result.zone.metadata.axfr_source != '127.0.0.8'
        - result.zone.metadata.slave_renotify != true
        - result.zone.tsig_allow_axfr[0] != 'axfr-key'

    - name: check notify for zone
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: notify
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true

    - name: check zone removal
      pdns_auth_zone:
        <<: *common
        name: d2.example.
        state: absent
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true

    - name: check 'Slave' zone creation
      pdns_auth_zone:
        <<: *common
        name: d3.example.
        state: present
        properties:
          kind: 'Slave'
          masters:
            - '1.1.1.1'
            - '::1'
        metadata:
          axfr_master_tsig:
            - 'axfr-key'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
        - result.zone.name != d3.example.
        - result.zone.kind != 'Slave'
        - result.zone.masters[0] != '1.1.1.1'
        - result.zone.masters[1] != '::1'
        - result.zone.axfr_master_tsig[0] != 'axfr-key'

    - name: check slave zone retrieval
      pdns_auth_zone:
        <<: *common
        name: d3.example.
        state: retrieve

    - name: check 'Slave' master change
      pdns_auth_zone:
        <<: *common
        name: d3.example.
        state: present
        properties:
          kind: 'Slave'
          masters:
            - '2.2.2.2'
            - '::1'
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
        - result.zone.masters[0] != '2.2.2.2'
        - result.zone.masters[1] != '::1'

    - name: check zone removal
      pdns_auth_zone:
        <<: *common
        name: d3.example.
        state: absent
      register: result

    - name: display result
      debug:
        var: "result"

    - name: check result
      debug:
        msg: "success"
      failed_when:
        - result.changed != true
